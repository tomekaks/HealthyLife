// <auto-generated />
using System;
using HealthyLife.Persistence.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HealthyLife.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241205173631_SeedMicronutrients")]
    partial class SeedMicronutrients
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("HealthyLife.Application.DomainModels.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly>("DateJoined")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "5330c916-053d-41e6-8a44-b9fe25cf27bf",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ca34628c-22a2-4533-a21a-d6827a315bb6",
                            DateJoined = new DateOnly(1, 1, 1),
                            Email = "admin@email.com",
                            EmailConfirmed = true,
                            FirstName = "System",
                            LastName = "Admin",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@EMAIL.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEERhOw8/+DC3o7d3BjOr1z8qRBPGqzHRzsb7DoZXid0dYTMsNM+Ur9mOXF/W6KJgFQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7a8a344d-fc79-4fbc-8b2a-4f4b188e321f",
                            TwoFactorEnabled = false,
                            UserName = "Admin"
                        },
                        new
                        {
                            Id = "9ef201b2-999c-4161-8f2b-d7994971e5ee",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "43dabcd4-cbfd-4356-b268-7aa706cdb665",
                            DateJoined = new DateOnly(1, 1, 1),
                            Email = "tester@email.com",
                            EmailConfirmed = true,
                            FirstName = "Test",
                            LastName = "User",
                            LockoutEnabled = false,
                            NormalizedEmail = "TESTE@EMAIL.COM",
                            NormalizedUserName = "TESTER",
                            PasswordHash = "AQAAAAIAAYagAAAAEMubiJpToYOlpVIXYHYrTi2BOHcrfEIoulU/HKEHiKjIvgMtAYiajMq4446JpTdsBA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "52cf7292-42e5-4658-899d-47a7aea97513",
                            TwoFactorEnabled = false,
                            UserName = "Tester"
                        });
                });

            modelBuilder.Entity("HealthyLife.Application.DomainModels.DailyGoal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("Calories")
                        .HasColumnType("float");

                    b.Property<double>("Carbs")
                        .HasColumnType("float");

                    b.Property<double>("Fats")
                        .HasColumnType("float");

                    b.Property<double>("Fiber")
                        .HasColumnType("float");

                    b.Property<double>("Proteins")
                        .HasColumnType("float");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("DailyGoals");
                });

            modelBuilder.Entity("HealthyLife.Application.DomainModels.DailySum", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("Calories")
                        .HasColumnType("float");

                    b.Property<double>("CaloriesBurned")
                        .HasColumnType("float");

                    b.Property<double>("Carbs")
                        .HasColumnType("float");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<double>("Fats")
                        .HasColumnType("float");

                    b.Property<double>("Fiber")
                        .HasColumnType("float");

                    b.Property<double>("Proteins")
                        .HasColumnType("float");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId", "Date")
                        .IsUnique();

                    b.ToTable("DailySums");
                });

            modelBuilder.Entity("HealthyLife.Application.DomainModels.Exercise", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CaloriesPerHour")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Exercises");
                });

            modelBuilder.Entity("HealthyLife.Application.DomainModels.Meal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("Calories")
                        .HasColumnType("float");

                    b.Property<double>("Carbs")
                        .HasColumnType("float");

                    b.Property<int>("DailySumId")
                        .HasColumnType("int");

                    b.Property<double>("Fats")
                        .HasColumnType("float");

                    b.Property<double>("Fiber")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Position")
                        .HasColumnType("int");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<double>("Proteins")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("DailySumId");

                    b.ToTable("Meals");
                });

            modelBuilder.Entity("HealthyLife.Application.DomainModels.MealItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("Calories")
                        .HasColumnType("float");

                    b.Property<double>("Carbs")
                        .HasColumnType("float");

                    b.Property<double>("Fats")
                        .HasColumnType("float");

                    b.Property<double>("Fiber")
                        .HasColumnType("float");

                    b.Property<int>("MealId")
                        .HasColumnType("int");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<double>("Proteins")
                        .HasColumnType("float");

                    b.Property<int>("Weight")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MealId");

                    b.HasIndex("ProductId");

                    b.ToTable("MealItems");
                });

            modelBuilder.Entity("HealthyLife.Application.DomainModels.Micronutrient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal?>("DailyIntakeLimitMg")
                        .HasPrecision(10, 5)
                        .HasColumnType("decimal(10,5)");

                    b.Property<decimal>("DailyRecommendedIntakeMg")
                        .HasPrecision(10, 5)
                        .HasColumnType("decimal(10,5)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Micronutrients");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DailyIntakeLimitMg = 3m,
                            DailyRecommendedIntakeMg = 0.9m,
                            Name = "Vitamin A"
                        },
                        new
                        {
                            Id = 2,
                            DailyRecommendedIntakeMg = 1.2m,
                            Name = "Vitamin B1"
                        },
                        new
                        {
                            Id = 3,
                            DailyRecommendedIntakeMg = 1.3m,
                            Name = "Vitamin B2"
                        },
                        new
                        {
                            Id = 4,
                            DailyIntakeLimitMg = 35m,
                            DailyRecommendedIntakeMg = 16m,
                            Name = "Vitamin B3"
                        },
                        new
                        {
                            Id = 5,
                            DailyRecommendedIntakeMg = 5m,
                            Name = "Vitamin B5"
                        },
                        new
                        {
                            Id = 6,
                            DailyIntakeLimitMg = 100m,
                            DailyRecommendedIntakeMg = 1.3m,
                            Name = "Vitamin B6"
                        },
                        new
                        {
                            Id = 7,
                            DailyRecommendedIntakeMg = 0.03m,
                            Name = "Vitamin B7"
                        },
                        new
                        {
                            Id = 8,
                            DailyIntakeLimitMg = 1m,
                            DailyRecommendedIntakeMg = 0.4m,
                            Name = "Vitamin B9"
                        },
                        new
                        {
                            Id = 9,
                            DailyRecommendedIntakeMg = 0.0024m,
                            Name = "Vitamin B12"
                        },
                        new
                        {
                            Id = 10,
                            DailyIntakeLimitMg = 2m,
                            DailyRecommendedIntakeMg = 0.09m,
                            Name = "Vitamin C"
                        },
                        new
                        {
                            Id = 11,
                            DailyIntakeLimitMg = 3.5m,
                            DailyRecommendedIntakeMg = 0.55m,
                            Name = "Choline"
                        },
                        new
                        {
                            Id = 12,
                            DailyIntakeLimitMg = 0.1m,
                            DailyRecommendedIntakeMg = 0.015m,
                            Name = "Vitamin D"
                        },
                        new
                        {
                            Id = 13,
                            DailyIntakeLimitMg = 1m,
                            DailyRecommendedIntakeMg = 0.015m,
                            Name = "Vitamin E"
                        },
                        new
                        {
                            Id = 14,
                            DailyRecommendedIntakeMg = 0.12m,
                            Name = "Vitamin K"
                        },
                        new
                        {
                            Id = 15,
                            DailyIntakeLimitMg = 2500m,
                            DailyRecommendedIntakeMg = 1000m,
                            Name = "Calcium"
                        },
                        new
                        {
                            Id = 16,
                            DailyRecommendedIntakeMg = 2300m,
                            Name = "Chloride"
                        },
                        new
                        {
                            Id = 17,
                            DailyRecommendedIntakeMg = 0.035m,
                            Name = "Chromium"
                        },
                        new
                        {
                            Id = 18,
                            DailyIntakeLimitMg = 10m,
                            DailyRecommendedIntakeMg = 0.9m,
                            Name = "Copper"
                        },
                        new
                        {
                            Id = 19,
                            DailyIntakeLimitMg = 10m,
                            DailyRecommendedIntakeMg = 4m,
                            Name = "Fluoride"
                        },
                        new
                        {
                            Id = 20,
                            DailyIntakeLimitMg = 1.1m,
                            DailyRecommendedIntakeMg = 0.15m,
                            Name = "Iodine"
                        },
                        new
                        {
                            Id = 21,
                            DailyIntakeLimitMg = 45m,
                            DailyRecommendedIntakeMg = 8m,
                            Name = "Iron"
                        },
                        new
                        {
                            Id = 22,
                            DailyIntakeLimitMg = 400m,
                            DailyRecommendedIntakeMg = 400m,
                            Name = "Magnesium"
                        },
                        new
                        {
                            Id = 23,
                            DailyIntakeLimitMg = 11m,
                            DailyRecommendedIntakeMg = 2.3m,
                            Name = "Manganese"
                        },
                        new
                        {
                            Id = 24,
                            DailyIntakeLimitMg = 4000m,
                            DailyRecommendedIntakeMg = 700m,
                            Name = "Phosphorus"
                        },
                        new
                        {
                            Id = 25,
                            DailyRecommendedIntakeMg = 3000m,
                            Name = "Potassium"
                        },
                        new
                        {
                            Id = 26,
                            DailyIntakeLimitMg = 0.4m,
                            DailyRecommendedIntakeMg = 0.055m,
                            Name = "Selenium"
                        },
                        new
                        {
                            Id = 27,
                            DailyRecommendedIntakeMg = 1500m,
                            Name = "Sodium"
                        },
                        new
                        {
                            Id = 28,
                            DailyIntakeLimitMg = 40m,
                            DailyRecommendedIntakeMg = 11m,
                            Name = "Zinc"
                        });
                });

            modelBuilder.Entity("HealthyLife.Application.DomainModels.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("Calories")
                        .HasColumnType("float");

                    b.Property<double>("Carbs")
                        .HasColumnType("float");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Fats")
                        .HasColumnType("float");

                    b.Property<double>("Fiber")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<double>("Proteins")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("HealthyLife.Application.DomainModels.ProductMicronutrientEntry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("MicronutrientId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MicronutrientId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductMicronutrientEntries");
                });

            modelBuilder.Entity("HealthyLife.Application.DomainModels.Supplement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PricePerServing")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ServingForm")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ServingSize")
                        .HasColumnType("int");

                    b.Property<string>("ServingUnit")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Servings")
                        .HasColumnType("int");

                    b.Property<int>("TotalQuantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Supplements");
                });

            modelBuilder.Entity("HealthyLife.Application.DomainModels.SupplementMicronutrientEntry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("MicronutrientId")
                        .HasColumnType("int");

                    b.Property<int>("SuppelementId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MicronutrientId");

                    b.HasIndex("SuppelementId");

                    b.ToTable("SupplementMicronutrientEntries");
                });

            modelBuilder.Entity("HealthyLife.Application.DomainModels.Workout", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CaloriesBurned")
                        .HasColumnType("int");

                    b.Property<int>("DailySumId")
                        .HasColumnType("int");

                    b.Property<int>("ExerciseId")
                        .HasColumnType("int");

                    b.Property<int>("Minutes")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DailySumId");

                    b.HasIndex("ExerciseId");

                    b.ToTable("Workouts");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "abebd04b-4c91-40ca-a99e-8577ff0f262e",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        },
                        new
                        {
                            Id = "ee6ef51f-eaf9-406e-863e-b8012bd7045a",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "5330c916-053d-41e6-8a44-b9fe25cf27bf",
                            RoleId = "abebd04b-4c91-40ca-a99e-8577ff0f262e"
                        },
                        new
                        {
                            UserId = "9ef201b2-999c-4161-8f2b-d7994971e5ee",
                            RoleId = "ee6ef51f-eaf9-406e-863e-b8012bd7045a"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("HealthyLife.Application.DomainModels.DailyGoal", b =>
                {
                    b.HasOne("HealthyLife.Application.DomainModels.ApplicationUser", "User")
                        .WithOne("DailyGoal")
                        .HasForeignKey("HealthyLife.Application.DomainModels.DailyGoal", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("HealthyLife.Application.DomainModels.DailySum", b =>
                {
                    b.HasOne("HealthyLife.Application.DomainModels.ApplicationUser", "User")
                        .WithMany("DailySums")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("HealthyLife.Application.DomainModels.Meal", b =>
                {
                    b.HasOne("HealthyLife.Application.DomainModels.DailySum", "DailySum")
                        .WithMany("Meals")
                        .HasForeignKey("DailySumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DailySum");
                });

            modelBuilder.Entity("HealthyLife.Application.DomainModels.MealItem", b =>
                {
                    b.HasOne("HealthyLife.Application.DomainModels.Meal", "Meal")
                        .WithMany("MealItems")
                        .HasForeignKey("MealId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("HealthyLife.Application.DomainModels.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Meal");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("HealthyLife.Application.DomainModels.ProductMicronutrientEntry", b =>
                {
                    b.HasOne("HealthyLife.Application.DomainModels.Micronutrient", "Micronutrient")
                        .WithMany()
                        .HasForeignKey("MicronutrientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HealthyLife.Application.DomainModels.Product", "Product")
                        .WithMany("Micronutrients")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Micronutrient");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("HealthyLife.Application.DomainModels.SupplementMicronutrientEntry", b =>
                {
                    b.HasOne("HealthyLife.Application.DomainModels.Micronutrient", "Micronutrient")
                        .WithMany()
                        .HasForeignKey("MicronutrientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HealthyLife.Application.DomainModels.Supplement", "Supplement")
                        .WithMany("Micronutrients")
                        .HasForeignKey("SuppelementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Micronutrient");

                    b.Navigation("Supplement");
                });

            modelBuilder.Entity("HealthyLife.Application.DomainModels.Workout", b =>
                {
                    b.HasOne("HealthyLife.Application.DomainModels.DailySum", "DailySum")
                        .WithMany("Workouts")
                        .HasForeignKey("DailySumId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("HealthyLife.Application.DomainModels.Exercise", "Exercise")
                        .WithMany()
                        .HasForeignKey("ExerciseId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("DailySum");

                    b.Navigation("Exercise");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("HealthyLife.Application.DomainModels.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("HealthyLife.Application.DomainModels.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HealthyLife.Application.DomainModels.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("HealthyLife.Application.DomainModels.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HealthyLife.Application.DomainModels.ApplicationUser", b =>
                {
                    b.Navigation("DailyGoal")
                        .IsRequired();

                    b.Navigation("DailySums");
                });

            modelBuilder.Entity("HealthyLife.Application.DomainModels.DailySum", b =>
                {
                    b.Navigation("Meals");

                    b.Navigation("Workouts");
                });

            modelBuilder.Entity("HealthyLife.Application.DomainModels.Meal", b =>
                {
                    b.Navigation("MealItems");
                });

            modelBuilder.Entity("HealthyLife.Application.DomainModels.Product", b =>
                {
                    b.Navigation("Micronutrients");
                });

            modelBuilder.Entity("HealthyLife.Application.DomainModels.Supplement", b =>
                {
                    b.Navigation("Micronutrients");
                });
#pragma warning restore 612, 618
        }
    }
}
